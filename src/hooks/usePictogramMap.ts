import { useState, useEffect, useMemo } from 'react';
import { District } from '@/types/pictogram';
import { SEOUL_DISTRICTS } from '@/data/districts';

interface UsePictogramMapOptions {
  initialSelectedDistrict?: string;
  colorScale?: 'population' | 'density' | 'change';
  autoGenerateData?: boolean;
}

export const usePictogramMap = (options: UsePictogramMapOptions = {}) => {
  const {
    initialSelectedDistrict,
    colorScale = 'population',
    autoGenerateData = true
  } = options;

  const [selectedDistrict, setSelectedDistrict] = useState<string | undefined>(initialSelectedDistrict);
  const [hoveredDistrict, setHoveredDistrict] = useState<string | null>(null);
  const [districts, setDistricts] = useState<District[]>(SEOUL_DISTRICTS);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Generate mock population data if needed
  useEffect(() => {
    if (autoGenerateData && districts.some(d => !d.populationData)) {
      const updatedDistricts = districts.map(district => ({
        ...district,
        populationData: district.populationData || {
          current: Math.floor(Math.random() * 800000) + 200000, // 20만~100만
          density: Math.floor(Math.random() * 15000) + 3000,    // 3천~18천
          change: (Math.random() - 0.5) * 10                   // -5% ~ +5%
        }
      }));
      setDistricts(updatedDistricts);
    }
  }, [autoGenerateData, districts]);

  // Handlers
  const handleDistrictClick = (districtId: string) => {
    setSelectedDistrict(prev => prev === districtId ? undefined : districtId);
  };

  const handleDistrictHover = (districtId: string | null) => {
    setHoveredDistrict(districtId);
  };

  // Get selected district data
  const selectedDistrictData = useMemo(() => {
    return selectedDistrict 
      ? districts.find(d => d.id === selectedDistrict)
      : null;
  }, [selectedDistrict, districts]);

  // Get statistics
  const statistics = useMemo(() => {
    const validDistricts = districts.filter(d => d.populationData);
    const totalPopulation = validDistricts.reduce((sum, d) => sum + d.populationData!.current, 0);
    const averageDensity = validDistricts.reduce((sum, d) => sum + d.populationData!.density, 0) / validDistricts.length;
    const totalArea = validDistricts.length * 10; // Mock area calculation
    
    return {
      totalDistricts: districts.length,
      totalPopulation,
      averageDensity: Math.round(averageDensity),
      totalArea,
      populationGrowth: validDistricts.reduce((sum, d) => sum + d.populationData!.change, 0) / validDistricts.length
    };
  }, [districts]);

  // Update population data (for real-time updates)
  const updatePopulationData = (districtId: string, newData: Partial<District['populationData']>) => {
    setDistricts(prev => 
      prev.map(district => 
        district.id === districtId 
          ? {
              ...district,
              populationData: district.populationData 
                ? { ...district.populationData, ...newData }
                : { current: 0, density: 0, change: 0, ...newData }
            }
          : district
      )
    );
  };

  // Fetch real data (placeholder for API integration)
  const fetchDistrictData = async (districtId?: string) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // Mock API call - replace with actual API
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock response
      const mockData = {
        current: Math.floor(Math.random() * 800000) + 200000,
        density: Math.floor(Math.random() * 15000) + 3000,
        change: (Math.random() - 0.5) * 10
      };

      if (districtId) {
        updatePopulationData(districtId, mockData);
      } else {
        // Update all districts
        const updatedDistricts = districts.map(district => ({
          ...district,
          populationData: {
            current: Math.floor(Math.random() * 800000) + 200000,
            density: Math.floor(Math.random() * 15000) + 3000,
            change: (Math.random() - 0.5) * 10
          }
        }));
        setDistricts(updatedDistricts);
      }
    } catch (err) {
      setError('데이터를 불러오는 중 오류가 발생했습니다.');
      console.error('Error fetching district data:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Reset selection
  const resetSelection = () => {
    setSelectedDistrict(undefined);
    setHoveredDistrict(null);
  };

  return {
    // State
    districts,
    selectedDistrict,
    hoveredDistrict,
    selectedDistrictData,
    isLoading,
    error,
    statistics,
    
    // Actions
    handleDistrictClick,
    handleDistrictHover,
    updatePopulationData,
    fetchDistrictData,
    resetSelection,
    
    // Setters
    setSelectedDistrict,
    setColorScale: (scale: 'population' | 'density' | 'change') => {
      // This would trigger re-render with new color scale
      // Implementation depends on how you want to manage this state
    }
  };
};